#!/usr/bin/env python

from sys import stdout, stderr, exit
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter as ADHF, \
        FileType
from os.path import basename
import logging
import csv

import numpy as np


LOG = logging.getLogger(__name__)
LOG.setLevel(logging.DEBUG)

OUTPUT_FORMATS = ('trv', 'bg2')

def writeMtrxTRV(mtrx, colnames, rownames, title, out):
    print >> out, '%s\tRegions\t%s' %(title, '\t'.join(colnames))
    for i in xrange(mtrx.shape[0]):
        out.write('\t'.join((rownames[i], rownames[i])))
        for j in xrange(mtrx.shape[1]):
            out.write('\t')
            if mtrx[i][j] != None:
                out.write(str(mtrx[i][j]))
        out.write('\n')

    i = len(mtrx)
    while i < len(rownames):
        print >> out, '\t'.join((rownames[i], rownames[i]))
        i += 1


def readBG2(data, labels):
    ''' constructs full matrix from bg2 data '''

    # allocate matrix
    mtrx = np.empty((len(labels), len(labels)), dtype=object)
    
    # mapping from chromosomal position to index in matrix
    pos2idx = dict((x[:2], i) for i, x in enumerate(labels))

    for l, (chrx, startx, _, chry, starty, _, _, balanced_count) in enumerate(
            csv.reader(data, delimiter='\t')):
        i = pos2idx[(chrx, int(startx))]
        j = pos2idx[(chry, int(starty))]
        if balanced_count:
            mtrx[i,j] = mtrx[j,i] = float(balanced_count)
        else:
            LOG.warning(('balanced count between %s:%s-%s:%s (line %s) is ' + \
                    'empty') %(chrx, startx, chry, starty, l+1))
    return mtrx


if __name__ == '__main__':
    parser = ArgumentParser(formatter_class=ADHF)
    parser.add_argument('bed_file', type=file, 
            help='bed file containing segmentation of genome corresponding ' + \
                    'to matrix')
    parser.add_argument('bg2_file', type=file, 
            help='Hi-C matrix in BG2 (bed version 2) format generated by cooler')
    args = parser.parse_args()

    # setup logging
    ch = logging.StreamHandler(stderr)
    ch.setLevel(logging.DEBUG)
    ch.setFormatter(logging.Formatter('%(levelname)s\t%(asctime)s\t%(message)s'))
    LOG.addHandler(ch)

    LOG.info('reading matrix labels (bed file %s)' %args.bed_file.name)
    labels = list((x[0], int(x[1]), int(x[2])) for x in \
            csv.reader(args.bed_file, delimiter = '\t'))

    LOG.info('reading BG2 data and transforming counts into full matrix')
    mtrx = readBG2(args.bg2_file, labels)
    LOG.info('writing output in TRV format')
    names = map(lambda x: '%s-%s' %x[:2], labels)
    writeMtrxTRV(mtrx, names, names, '%s:bg2_to_trv' %basename(
        args.bg2_file.name), stdout)
    LOG.info('DONE')
